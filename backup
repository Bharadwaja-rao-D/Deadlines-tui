pub fn ui<B: Backend>(frame: &mut Frame<B>, file: &PathBuf, rx: &Receiver<Input>) {
    let mut visible_dealines = VisibleDeadlines::new(file);
    let percent = (100 / visible_dealines.visible).try_into().unwrap();
    let constraints = vec![Constraint::Percentage(percent); VISIBLE];
    let chunks = Layout::default()
        .direction(Direction::Vertical)
        .constraints(constraints.as_ref())
        .split(frame.size()); //splits the given area into the smaller required areas

    //First render
    if let Some(deadlines) = visible_dealines.next() {
        for (i, ele) in deadlines.into_iter().enumerate() {
            let block = Block::default()
                .title(format!("{}", ele.course))
                .borders(Borders::ALL);

            let paragraph = Paragraph::new(format!(
                "Course: {}\nAssignment: {}\nDeadline: {}",
                ele.course, ele.assignment, ele.date
            ))
            .block(block);

            frame.render_widget(paragraph, chunks[i])
        }
    }

    //Second render if needed
    if let Ok(input) = rx.try_recv() {
        match input {
            Input::Next => {
                //Clear the previously rendered blocks
                for i in 0..VISIBLE {
                    frame.render_widget(Clear, chunks[i]);
                }

                if let Some(deadlines) = visible_dealines.next() {
                    //println!("{:?}", deadlines);
                    for (i, ele) in deadlines.into_iter().enumerate() {
                        let block = Block::default()
                            .title(format!("{}", ele.course))
                            .borders(Borders::ALL);

                        let paragraph = Paragraph::new(format!(
                            "Course: {}\nAssignment: {}\nDeadline: {}",
                            ele.course, ele.assignment, ele.date
                        ))
                        .block(block);

                        frame.render_widget(paragraph, chunks[i]);
                    }
                }
            }
            _ => {}
        }
    }
}

